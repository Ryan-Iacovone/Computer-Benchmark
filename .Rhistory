) +
#scale_y_continuous(breaks = seq(0, 100, by = 20),
#limits = c(0, 100)) +
scale_x_continuous(
breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%2d:%02d", floor(x/60), x %% 60),
minor_breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 10),
) +
scale_color_manual(name = NULL, values = c("CPU Fan" = "red", "GPU Fan" = "blue", "Case" = "green")) +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
fan_speed_list[[df_name]] <- fan_speed
}
fan_speed_list[[game]]
temp_power_cpu_list <- list()
for (df_name in names(df_list_hw)) {
temp_power_cpu <- ggplot(df_list_hw[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU.Package.Power..W., color = "CPU Power")) +
geom_line(aes(y = CPU..Tctl.Tdie....C., color = "CPU Temp")) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Power: ", round(mean(df_list_hw[[df_name]]$CPU.Package.Power..W.), 1), " W", "\n",
"Avg CPU Temp: ", round(mean(df_list_hw[[df_name]]$CPU..Tctl.Tdie....C.), 1), " *C", "\n"),
size = 2.5, color = "black", hjust = -0.05, vjust = 1.1) +
labs(
x = "Time (M:SS)",
title = paste0("CPU Power and Temperature Over Time in ", df_name)
) +
scale_x_continuous(
breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%02d:%02d", floor(x/60), x %% 60)
) +
scale_y_continuous(name = "Power Draw (Watts)" ,
sec.axis = sec_axis(~., name =  "Temperature (*C)")) +
#breaks = seq(40, 80, by = 5),
#minor_breaks = seq(40, 80, by = 2.5),
#limits = c(40, 80)) +
scale_color_manual(name = NULL,
values = c("CPU Power" = "red", "CPU Temp" = "blue")) +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.85, 0.90),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) + #makes a box around the legend and adds a fill!
guides(fill = guide_legend(reverse = TRUE))
temp_power_cpu_list[[df_name]] <- temp_power_cpu
rm(temp_power_cpu)
}
temp_power_cpu_list[[game]]
#The "cairo = FALSE" parameter should get rid of the anti aliasing on the cinebench text
#ggsave(filename = "my_plot.png", dpi = 300, cairo = FALSE)
temp_power_gpu_list <- list()
for (df_name in names(df_list_hw)) {
temp_power_gpu <- ggplot(df_list_hw[[df_name]], aes(seconds)) +
geom_line(aes(y = GPU.PPT..W., color = "GPU Power")) +
geom_line(aes(y = GPU.Temperature...C., color = "GPU Temp")) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg GPU Power: ", round(mean(df_list_hw[[df_name]]$GPU.PPT..W.), 1), " W", "\n",
"Avg GPU Temp: ", round(mean(df_list_hw[[df_name]]$GPU.Temperature...C.), 1), " *C","\n"),
size = 2.5, color = "black", hjust = -0.05, vjust = 1.1) +
labs(
x = "Time (M:SS)",
title = paste0("GPU Power and Temperature Over Time in ", df_name)
) +
scale_x_continuous(
breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%02d:%02d", floor(x/60), x %% 60)
) +
scale_y_continuous(name = "Power Draw (Watts)" ,
sec.axis = sec_axis(~., name =  "Temperature (*C)")) +
#breaks = seq(40, 80, by = 5),
#minor_breaks = seq(40, 80, by = 2.5),
#limits = c(40, 80)) +
scale_color_manual(name = NULL,
values = c("GPU Power" = "blue", "GPU Temp" = "red")) +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.direction = "horizontal",
legend.position = c(0.85, 0.90),
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) + #makes a box around the legend and adds a fill!
guides(fill = guide_legend(reverse = TRUE))
temp_power_gpu_list[[df_name]] <- temp_power_gpu
rm(temp_power_gpu)
}
temp_power_gpu_list[[game]]
#Data Wrangling
summary_fps <- read_excel(excel_file_frameview, sheet = "Summary")
#contains columns I might find important later but don't rn like `Min FPS`, `Max FPS`
summary_fps_o <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`, `Min FPS`, `Max FPS`)
summary_fps <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`)
#code to strip the .exe from the application variable so that it just displays the game name
pattern <- "\\.exe$"
summary_fps$Application <- str_replace(summary_fps$Application, pattern, "")
#Code to calculate averages of "Avg FPS", "1% Low FPS", and "0.1% Low FPS" across game observations (the goal is 3 observations per game then take the averages of that)
summary_fps <- summary_fps %>% group_by(Application) %>%
summarise('AVG FPS' = mean(`Avg FPS`),
'1% Lows' = mean(`1% Low FPS`),
'0.1% Lows' = mean(`0.1% Low FPS`))
#Pivoting the data to a longer format so that each of my FPS measures has their own column
summary_fps_long <- pivot_longer(summary_fps, cols = c("AVG FPS", "1% Lows", "0.1% Lows"), names_to = "fps_type", values_to = "fps")
#Changing the names of the games in the application column to better fit
summary_fps_long <- summary_fps_long %>%
mutate(Application = recode(Application,
"FortniteClient-Win64-Shipping" = "Fortnite",
"starwarsbattlefrontii" = "SW Battlefront II",
"r5apex" = "Apex",
"cod" = "COD: Warzone",
"destiny2" = "Destiny 2"))
#Original
#hehe <- pivot_longer(summary_fps, cols = c("Avg FPS", "1% Low FPS", "0.1% Low FPS"), names_to = "fps_type", values_to = "fps")
#changing the format of the newly created FPS column so that it only displays out to 1 decimal point string to display all numbers
summary_fps_long$fps <- round(summary_fps_long$fps, digits = 1)
# Plot horizontal bar chart for all selected games
fps_bar <- summary_fps_long %>% ggplot(aes(x =  fps, y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration") +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
#original
#scale_fill_manual(values = c("Avg FPS" = "darkblue", "1% Low FPS" = "maroon", "0.1% Low FPS" = "yellow")) +
scale_x_continuous(breaks = seq(0, 500, by = 100),
limits = c(0, 500)) +
#Reversing the legend does work in this case, but like in the KDL study I got around this by manually defining the factor levels for each variable
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
#Create a list of lists with all the graphs we created above to loop through them and save each indivudal graph to its appropriate game file
List_of_list <- list(fan_speed_list, power_plots, gpu_cl_plots, cpu_clk_plots, utilization_plots, temperautre_plots, frametime_plots, temp_power_cpu_list, temp_power_gpu_list)
#Just adding names to the above lists to make looping through them easier
names(List_of_list) <- c("fan_speed_list", "power_plots", "gpu_cl_plots", "cpu_clk_plots", "utilization_plots", "temperautre_plots", "frametime_plots", "temp_power_cpu_list", "temp_power_gpu_list")
# Defining the path we want to initially save all of the graphs before we sort by game
path_name <- "C:/Users/Ryan/Coding Projects/Computer Benchmark/unsorted game graphs"
# Looping through each list saved in List_of_list then getting the number of graphs saved in that specific list (format of numbers is 1,2,3,4, 1,2,3,4,5,1,2,3,4,5,ect through each list of graphs)
#Then we extract the game name from each individual list to name the file later
#Then we create the file name based on the list name from List_of_list and it's specific game graph we're saving
for (name_list in seq_along(List_of_list)) {
for (i in seq_along(List_of_list[[name_list]])) {
game_name <- names(List_of_list[[name_list]][i])
file_name <- paste0(names(List_of_list)[name_list], " - ", game_name, ".png")
ggsave(List_of_list[[name_list]][[i]], file = file.path(path_name, file_name))
}
}
library(tidyverse)
library(readxl)
library(lubridate) #for date extraction and manipulation
library(ggthemes)
excel_file_hwinfo = "C:/Users/Ryan/Coding Projects/Computer Benchmark/Data/hwinfo_test.xlsx"
timespy <- read_excel(excel_file_hwinfo, sheet = "hwinfo_timespy")
firestrike <- read_excel(excel_file_hwinfo, sheet = "hwinfo_firestrike_e")
heaven <- read_excel(excel_file_hwinfo, sheet = "hwinfo_heaven")
cinebench <- read_excel(excel_file_hwinfo, sheet = "hwinfo_cinebench")
#Creating a list of dataframes from above
df_list <- list(timespy, heaven, cinebench, firestrike)
# Rename each data frame in the list to match its sheet name
names(df_list) <- c("Timespy", "Heaven", "Cinebench", "Firestrike")
# Remove the last 2 rows from each data frame
df_list <- lapply(df_list, function(df) head(df, -2))
# Convert all columns (except for the date column) to numeric then recombines original date variable to numeric dataset
df_list <- lapply(df_list, function(df) {
df_num <- as.data.frame(lapply(df[-1], as.numeric))
cbind(df[1], df_num)
})
# Rename the date column to "DateTime"
df_list <- lapply(df_list, function(df) {
names(df)[1] <- "DateTime"
df
})
# Convert the "DateTime" column to POSIXct format
df_list <- lapply(df_list, function(df) {
df$DateTime <- ymd_hms(df$DateTime)
df
})
# Add a "seconds" column representing seconds since the first observation
df_list <- lapply(df_list, function(df) {
df$seconds <- as.numeric(df$DateTime - min(df$DateTime))
df
})
#Creating a list of scores for that each benchmark achieved - needs to be updated once I want a new report
score <- list(19448, 5872, 20517, 26593)
names(score) <- c("Timespy", "Heaven", "Cinebench", "Firestrike")
power_plots <- list()
for (df_name in names(df_list)) {
power <- ggplot(df_list[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU.Package.Power..W., color = "CPU")) +
geom_line(aes(y = GPU.PPT..W., color = "GPU")) +
annotate("text", x = -Inf, y = Inf, label = paste0("Score: ", score[[df_name]]),
size = 4, color = "black", hjust = -.2, vjust = 1.5) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Power: ", round(mean(df_list[[df_name]]$CPU.Package.Power..W.), 1), " W", "\n",
"Avg GPU Temp: ", round(mean(df_list[[df_name]]$GPU.PPT..W.), 1), " W", "\n"),
size = 2.5, color = "black", hjust = -1.2, vjust = 1.1) +
labs(
y = "Power Draw (Watts)",
x = "Time (M:SS)",
title = paste0("Comparing Power Consumption of CPU and GPU in ", df_name)
) +
scale_y_continuous(breaks = seq(0, 300, by = 50),
minor_breaks = seq(0, 300, by = 25),
limits = c(0, 300)) +
scale_x_continuous(
breaks = seq(0, max(df_list[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%2d:%02d", floor(x/60), x %% 60)
) +
scale_color_manual(name = NULL, values = c("CPU" = "red", "GPU" = "blue")) +
theme_bw() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.85, 0.92),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
power_plots[[df_name]] <- power
rm(power)
}
power_plots[["Firestrike"]]
temperautre_plots <- list()
for (df_name in names(df_list)) {
temp <- ggplot(df_list[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU..Tctl.Tdie....C., color = "CPU")) +
geom_line(aes(y = GPU.Temperature...C., color = "GPU")) +
annotate("text", x = -Inf, y = Inf, label = paste0("Score: ", score[[df_name]]),
size = 4, color = "black", hjust = -.2, vjust = 1.5) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Temp: ", round(mean(df_list[[df_name]]$CPU..Tctl.Tdie....C.), 1), " *C", "\n",
"Avg GPU Temp: ", round(mean(df_list[[df_name]]$GPU.Temperature...C.), 1), " *C", "\n"),
size = 2.5, color = "black", hjust = -1.2, vjust = 1.1) +
labs(
y = "Temperature (*C)",
x = "Time (M:SS)",
title = paste0("Temperature of CPU and GPU over time in ", df_name)
) +
scale_x_continuous(
breaks = seq(0, max(df_list[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%02d:%02d", floor(x/60), x %% 60)
) +
#scale_y_continuous(breaks = seq(40, 80, by = 5),
#minor_breaks = seq(40, 80, by = 2.5),
#limits = c(40, 80)) +
scale_color_manual(name = NULL,
values = c("CPU" = "red", "GPU" = "blue")) +
theme_bw() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.85, 0.88),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
temperautre_plots[[df_name]] <- temp
rm(temp)
}
temperautre_plots[["Timespy"]]
temp_power_cpu_list <- list()
for (df_name in names(df_list)) {
temp_power_cpu <- ggplot(df_list[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU.Package.Power..W., color = "CPU Power")) +
geom_line(aes(y = CPU..Tctl.Tdie....C., color = "CPU Temp")) +
#A really cool function in R we can use to add not only text but shapes and lines to our graph
annotate("text", x = -Inf, y = Inf, label = paste0("Score: ", score[[df_name]]),
size = 4, color = "black", hjust = -.2, vjust = 1.5) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Power: ", round(mean(df_list[[df_name]]$CPU.Package.Power..W.), 1), " W", "\n",
"Avg CPU Temp: ", round(mean(df_list[[df_name]]$CPU..Tctl.Tdie....C.), 1), " *C", "\n"),
size = 2.5, color = "black", hjust = -1.2, vjust = 1.1) +
#original solutuion for the above text
#geom_text(aes(label = paste0("Score: ", score[df_name])), x = (max(df_list[[df_name]]$seconds) * .05), y = (max(df_list[[df_name]]$CPU.Package.Power..W.))) +
labs(
x = "Time (M:SS)",
title = paste0("CPU Power and Temperature Over Time in ", df_name)
) +
scale_x_continuous(
breaks = seq(0, max(df_list[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%02d:%02d", floor(x/60), x %% 60)
) +
scale_y_continuous(name = "Power Draw (Watts)" ,
sec.axis = sec_axis(~., name =  "Temperature (*C)")) +
#breaks = seq(40, 80, by = 5),
#minor_breaks = seq(40, 80, by = 2.5),
#limits = c(40, 80)) +
scale_color_manual(name = NULL,
values = c("CPU Power" = "red", "CPU Temp" = "blue")) +
theme_bw() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.8, 0.90),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) + #makes a box around the legend and adds a fill!
guides(fill = guide_legend(reverse = TRUE))
temp_power_cpu_list[[df_name]] <- temp_power_cpu
rm(temp_power_cpu)
}
temp_power_cpu_list[["Heaven"]]
#The "cairo = FALSE" parameter should get rid of the anti aliasing on the cinebench text
#ggsave(filename = "my_plot.png", dpi = 300, cairo = FALSE)
temp_power_gpu_list <- list()
for (df_name in names(df_list)) {
temp_power_gpu <- ggplot(df_list[[df_name]], aes(seconds)) +
geom_line(aes(y = GPU.PPT..W., color = "GPU Power")) +
geom_line(aes(y = GPU.Temperature...C., color = "GPU Temp")) +
annotate("text", x = -Inf, y = Inf, label = paste0("Score: ", score[[df_name]]),
size = 4, color = "black", hjust = -.2, vjust = 1.5) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg GPU Power: ", round(mean(df_list[[df_name]]$GPU.PPT..W.), 1), " W", "\n",
"Avg GPU Temp: ", round(mean(df_list[[df_name]]$GPU.Temperature...C.), 1), " *C", "\n"),
size = 2.5, color = "black", hjust = -1.2, vjust = 1.1) +
labs(
x = "Time (M:SS)",
title = paste0("GPU Power and Temperature Over Time in ", df_name)
) +
scale_x_continuous(
breaks = seq(0, max(df_list[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%02d:%02d", floor(x/60), x %% 60)
) +
scale_y_continuous(name = "Power Draw (Watts)" ,
sec.axis = sec_axis(~., name =  "Temperature (*C)")) +
#breaks = seq(40, 80, by = 5),
#minor_breaks = seq(40, 80, by = 2.5),
#limits = c(40, 80)) +
scale_color_manual(name = NULL,
values = c("GPU Power" = "blue", "GPU Temp" = "red")) +
theme_bw() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.85, 0.85),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) + #makes a box around the legend and adds a fill!
guides(fill = guide_legend(reverse = TRUE))
temp_power_gpu_list[[df_name]] <- temp_power_gpu
rm(temp_power_gpu)
}
temp_power_gpu_list[["Timespy"]]
utilization_plots <- list()
for (df_name in names(df_list)) {
utilization <- ggplot(df_list[[df_name]], aes(seconds)) +
geom_line(aes(y = Total.CPU.Usage...., color = "CPU")) +
geom_line(aes(y = GPU.Utilization...., color = "GPU")) +
annotate("text", x = -Inf, y = Inf, label = paste0("Score: ", score[[df_name]]),
size = 4, color = "black", hjust = -.2, vjust = 1.5) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Util: ", round(mean(df_list[[df_name]]$Total.CPU.Usage....), 1), "%", "\n",
"Avg GPU Util: ", round(mean(df_list[[df_name]]$GPU.Utilization....), 1), "%", "\n"),
size = 2.5, color = "black", hjust = -1.5, vjust = 1.1) +
labs(
y = "Percent Utilized (%)",
x = "Time (M:SS)",
title = paste0("Utilization of CPU and GPU Over Time in ", df_name)
) +
scale_y_continuous(breaks = seq(0, 100, by = 20),
limits = c(0, 100)) +
scale_x_continuous(
breaks = seq(0, max(df_list[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%2d:%02d", floor(x/60), x %% 60),
minor_breaks = seq(0, max(df_list[[df_name]]$seconds), by = 10),
) +
scale_color_manual(name = NULL,
values = c("CPU" = "red", "GPU" = "blue")) +
theme_bw() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.80, 0.92),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
utilization_plots[[df_name]] <- utilization
rm(utilization)
}
utilization_plots[["Timespy"]]
names(df_list[["cinebench"]])
fan_speed_list <- list()
for (df_name in names(df_list)) {
fan_speed <- ggplot(df_list[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU..RPM., color = "CPU Fan")) +
geom_line(aes(y = GPU.Fan..RPM., color = "GPU Fan")) +
geom_line(aes(y = System.2..RPM., color = "Case")) +
annotate("text", x = -Inf, y = Inf, label = paste0("Score: ", score[[df_name]]),
size = 4, color = "black", hjust = -.2, vjust = 1.5) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Fan: ", round(mean(df_list[[df_name]]$CPU..RPM.), 1), "\n",
"Avg GPU Fan: ", round(mean(df_list[[df_name]]$GPU.Fan..RPM.), 1), "\n",
"Avg Case Fan: ", round(mean(df_list[[df_name]]$System.2..RPM.), 1), "\n"),
size = 2.5, color = "black", hjust = -1.4, vjust = 1.1) +
labs(
y = "Fan speed (RPM)",
x = "Time (M:SS)",
title = paste0("Fan Speed Over Time in ", df_name)
) +
#scale_y_continuous(breaks = seq(0, 100, by = 20),
#limits = c(0, 100)) +
scale_x_continuous(
breaks = seq(0, max(df_list[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%2d:%02d", floor(x/60), x %% 60),
minor_breaks = seq(0, max(df_list[[df_name]]$seconds), by = 10),
) +
scale_color_manual(name = NULL, values = c("CPU Fan" = "red", "GPU Fan" = "blue", "Case" = "green")) +
theme_bw() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.75, 0.85),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
fan_speed_list[[df_name]] <- fan_speed
rm(fan_speed)
}
fan_speed_list[["Timespy"]]
clock_cpu_list <- list()
for (df_name in names(df_list)) {
clock_cpu <- ggplot(df_list[[df_name]], aes(seconds)) +
geom_line(aes(y = Core.Clocks..avg...MHz.), color = "red") +
annotate("text", x = -Inf, y = Inf, label = paste0("Score: ", score[[df_name]]),
size = 4, color = "black", hjust = -.2, vjust = 1.5) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU clk: ", round(mean(df_list[[df_name]]$Core.Clocks..avg...MHz.), 1), "\n"),
size = 2.5, color = "black", hjust = -1.5, vjust = 1.1) +
labs(
y = "CPU Speed (MHz)",
x = "Time (M:SS)",
title = paste0("CPU Clock Speed During ", df_name, " Run")
) +
scale_x_continuous(
breaks = seq(0, max(df_list[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%02d:%02d", floor(x/60), x %% 60)
) +
#scale_y_continuous(
#breaks = seq(3500, 5500, by = 250),
#limits = c(3500, 5500),
#minor_breaks = seq(3500, 5500, by = 125)) +
#scale_color_manual(name = "Measures",
#value = "Core.Clocks..avg...MHz." = "blue") +
theme_bw() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5))  #makes a box around the legend and adds a fill!
clock_cpu_list[[df_name]] <- clock_cpu
rm(clock_cpu)
}
clock_cpu_list[["Cinebench"]]
clock_gpu_list <- list()
for (df_name in names(df_list)) {
clock_gpu <- ggplot(df_list[[df_name]], aes(seconds)) +
geom_line(aes(y = GPU.Clock..MHz.), color = "red") +
annotate("text", x = -Inf, y = Inf, label = paste0("Score: ", score[[df_name]]),
size = 4, color = "black", hjust = -.2, vjust = 1.5) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg GPU clk: ", round(mean(df_list[[df_name]]$GPU.Clock..MHz.), 1), "\n"),
size = 2.5, color = "black", hjust = -1.5, vjust = 1.1) +
labs(
y = "GPU Speed (MHz)",
x = "Time (M:SS)",
title = paste0("GPU Clock Speed During ", df_name, " Run")
) +
scale_x_continuous(
breaks = seq(0, max(df_list[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%02d:%02d", floor(x/60), x %% 60)
) +
#scale_y_continuous(
#breaks = seq(3500, 5500, by = 250),
#limits = c(3500, 5500),
#minor_breaks = seq(3500, 5500, by = 125)) +
#scale_color_manual(name = "Measures",
#value = "Core.Clocks..avg...MHz." = "blue") +
theme_bw() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5))  #makes a box around the legend and adds a fill!
clock_gpu_list[[df_name]] <- clock_gpu
rm(clock_gpu)
}
clock_gpu_list[["Heaven"]]
# Itterating over each list of graphs above and save them individually as a png for a report
#Create a list of lists with all the graphs we created above to loop through them and save each indivudal graph to its appropriate game file
List_of_list <- list(clock_gpu_list, clock_cpu_list, fan_speed_list, utilization_plots, temp_power_gpu_list, temp_power_cpu_list, temperautre_plots, power_plots)
#Just adding names to the above lists to make looping through them easier
names(List_of_list) <- c("clock_gpu_list", "clock_cpu_list", "fan_speed_list", "utilization_plots", "temp_power_gpu_list", "temp_power_cpu_list", "temperautre_plots", "power_plots")
# Defining the path we want to initally save all of the graphs before we sort by game
path_name <- "C:/Users/Ryan/Coding Projects/Computer Benchmark/unsorted synthetic graphs"
# Looping through each list saved in List_of_list then getting the number of graphs saved in that specific list (format of numbers is 1,2,3,4, 1,2,3,4,5,1,2,3,4,5,ect through each list of graphs)
#Then we extract the game name from each individual list to name the file later
#Then we create the file name based on the list name from List_of_list and it's specific game graph we're saving
for (name_list in seq_along(List_of_list)) {
for (i in seq_along(List_of_list[[name_list]])) {
game_name <- names(List_of_list[[name_list]][i])
file_name <- paste0(names(List_of_list)[name_list], " - ", game_name, ".png")
ggsave(List_of_list[[name_list]][[i]], file = file.path(path_name, file_name))
}
}
