theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.65, 0.40),
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5))  #makes a box around the legend and adds a fill!
gpu_cl_plots[[df_name]] <- GPU_cl
}
gpu_cl_plots[[game]]
power_plots <- list()
for (df_name in names(df_list_hw)) {
power <- ggplot(df_list_hw[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU.Package.Power..W., color = "CPU")) +
geom_line(aes(y = GPU.PPT..W., color = "GPU")) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Power: ", round(mean(df_list_hw[[df_name]]$CPU.Package.Power..W.), 1), " W", "\n",
"Avg GPU Power: ", round(mean(df_list_hw[[df_name]]$GPU.PPT..W.), 1), " W"),
size = 2.5, color = "black", hjust = -0.05, vjust = 1.1) +
labs(
y = "Power Draw (Watts)",
x = "Time - (Minute:Seconds)",
title = paste0("Power Consumption of CPU and GPU Over Time in ", df_name)
) +
scale_y_continuous(breaks = seq(0, 300, by = 50),
minor_breaks = seq(0, 300, by = 25),
limits = c(0, 300)) +
scale_x_continuous(
breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%2d:%02d", floor(x/60), x %% 60)
) +
scale_color_manual(name = NULL, values = c("CPU" = "red", "GPU" = "blue")) +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.85, 0.92),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
power_plots[[df_name]] <- power
rm(power)
}
power_plots[[game]]
fan_speed_list <- list()
for (df_name in names(df_list_hw)) {
fan_speed <- ggplot(df_list_hw[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU..RPM., color = "CPU Fan")) +
geom_line(aes(y = GPU.Fan..RPM., color = "GPU Fan")) +
geom_line(aes(y = System.2..RPM., color = "Case")) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Fan: ", round(mean(df_list_hw[[df_name]]$CPU..RPM.), 1), "\n",
"Avg GPU Fan: ", round(mean(df_list_hw[[df_name]]$GPU.Fan..RPM.), 1),"\n",
"Avg Case Fan: ", round(mean(df_list_hw[[df_name]]$System.2..RPM.), 1),"\n"),
size = 2.5, color = "black", hjust = -0.05, vjust = 1.1) +
labs(
y = "Fan speed (RPM)",
x = "Time - (Minute:Seconds)",
title = paste0("Fan Speed Over Time in ", df_name)
) +
#scale_y_continuous(breaks = seq(0, 100, by = 20),
#limits = c(0, 100)) +
scale_x_continuous(
breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%2d:%02d", floor(x/60), x %% 60),
minor_breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 10),
) +
scale_color_manual(name = NULL, values = c("CPU Fan" = "red", "GPU Fan" = "blue", "Case" = "green")) +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
fan_speed_list[[df_name]] <- fan_speed
}
fan_speed_list[[game]]
temp_power_cpu_list <- list()
for (df_name in names(df_list_hw)) {
temp_power_cpu <- ggplot(df_list_hw[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU.Package.Power..W., color = "CPU Power")) +
geom_line(aes(y = CPU..Tctl.Tdie....C., color = "CPU Temp")) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Power: ", round(mean(df_list_hw[[df_name]]$CPU.Package.Power..W.), 1), " W", "\n",
"Avg CPU Temp: ", round(mean(df_list_hw[[df_name]]$CPU..Tctl.Tdie....C.), 1), " *C", "\n"),
size = 2.5, color = "black", hjust = -0.05, vjust = 1.1) +
labs(
x = "Time (M:SS)",
title = paste0("CPU Power and Temperature Over Time in ", df_name)
) +
scale_x_continuous(
breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%02d:%02d", floor(x/60), x %% 60)
) +
scale_y_continuous(name = "Power Draw (Watts)" ,
sec.axis = sec_axis(~., name =  "Temperature (*C)")) +
#breaks = seq(40, 80, by = 5),
#minor_breaks = seq(40, 80, by = 2.5),
#limits = c(40, 80)) +
scale_color_manual(name = NULL,
values = c("CPU Power" = "red", "CPU Temp" = "blue")) +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.85, 0.90),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) + #makes a box around the legend and adds a fill!
guides(fill = guide_legend(reverse = TRUE))
temp_power_cpu_list[[df_name]] <- temp_power_cpu
rm(temp_power_cpu)
}
temp_power_cpu_list[[game]]
#The "cairo = FALSE" parameter should get rid of the anti aliasing on the cinebench text
#ggsave(filename = "my_plot.png", dpi = 300, cairo = FALSE)
temp_power_gpu_list <- list()
for (df_name in names(df_list_hw)) {
temp_power_gpu <- ggplot(df_list_hw[[df_name]], aes(seconds)) +
geom_line(aes(y = GPU.PPT..W., color = "GPU Power")) +
geom_line(aes(y = GPU.Temperature...C., color = "GPU Temp")) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg GPU Power: ", round(mean(df_list_hw[[df_name]]$GPU.PPT..W.), 1), " W", "\n",
"Avg GPU Temp: ", round(mean(df_list_hw[[df_name]]$GPU.Temperature...C.), 1), " *C","\n"),
size = 2.5, color = "black", hjust = -0.05, vjust = 1.1) +
labs(
x = "Time (M:SS)",
title = paste0("GPU Power and Temperature Over Time in ", df_name)
) +
scale_x_continuous(
breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%02d:%02d", floor(x/60), x %% 60)
) +
scale_y_continuous(name = "Power Draw (Watts)" ,
sec.axis = sec_axis(~., name =  "Temperature (*C)")) +
#breaks = seq(40, 80, by = 5),
#minor_breaks = seq(40, 80, by = 2.5),
#limits = c(40, 80)) +
scale_color_manual(name = NULL,
values = c("GPU Power" = "blue", "GPU Temp" = "red")) +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.direction = "horizontal",
legend.position = c(0.85, 0.90),
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) + #makes a box around the legend and adds a fill!
guides(fill = guide_legend(reverse = TRUE))
temp_power_gpu_list[[df_name]] <- temp_power_gpu
rm(temp_power_gpu)
}
temp_power_gpu_list[[game]]
#Data Wrangling
summary_fps <- read_excel(excel_file_frameview, sheet = "Summary")
#contains columns I might find important later but don't rn like `Min FPS`, `Max FPS`
summary_fps_o <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`, `Min FPS`, `Max FPS`)
summary_fps <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`)
#code to strip the .exe from the application variable so that it just displays the game name
pattern <- "\\.exe$"
summary_fps$Application <- str_replace(summary_fps$Application, pattern, "")
#Code to calculate averages of "Avg FPS", "1% Low FPS", and "0.1% Low FPS" across game observations (the goal is 3 observations per game then take the averages of that)
summary_fps <- summary_fps %>% group_by(Application) %>%
summarise('AVG FPS' = mean(`Avg FPS`),
'1% Lows' = mean(`1% Low FPS`),
'0.1% Lows' = mean(`0.1% Low FPS`))
#Pivoting the data to a longer format so that each of my FPS measures has their own column
summary_fps_long <- pivot_longer(summary_fps, cols = c("AVG FPS", "1% Lows", "0.1% Lows"), names_to = "fps_type", values_to = "fps")
#Changing the names of the games in the application column to better fit
summary_fps_long <- summary_fps_long %>%
mutate(Application = recode(Application,
"FortniteClient-Win64-Shipping" = "Fortnite",
"starwarsbattlefrontii" = "SW Battlefront II",
"r5apex" = "Apex",
"cod" = "COD: Warzone",
"destiny2" = "Destiny 2"))
#Original
#hehe <- pivot_longer(summary_fps, cols = c("Avg FPS", "1% Low FPS", "0.1% Low FPS"), names_to = "fps_type", values_to = "fps")
#changing the format of the newly created FPS column so that it only displays out to 1 decimal point string to display all numbers
summary_fps_long$fps <- round(summary_fps_long$fps, digits = 1)
############# NOT AS EASY TO REODER A GROUPED BAR CHART AS IT IS A BOXPLOT #############
#Reordering the dataset to display by descending order in the box plot
#group_ordered <- with(summary_fps_long, reorder(fps, desc('AVG FPS'), mean))
#boxplot_circ_day$branch <- factor(boxplot_circ_day$branch, levels = levels(group_ordered))
# Plot horizontal bar chart for all selected games
fps_bar <- summary_fps_long %>% ggplot(aes(x = fps , y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration") +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
#original
#scale_fill_manual(values = c("Avg FPS" = "darkblue", "1% Low FPS" = "maroon", "0.1% Low FPS" = "yellow")) +
scale_x_continuous(breaks = seq(0, 500, by = 100),
limits = c(0, 500)) +
#Reversing the legend does work in this case, but like in the KDL study I got around this by manually defining the factor levels for each variable
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
# Assuming you have a ggplot object named 'plot' and your y-axis values are in percent (e.g., 0.75 for 75%)
# Create a dummy data frame for illustration
df <- data.frame(
x = c(1, 2, 3, 4),
y = c(0.25, 0.5, 0.75, 1)
)
library(ggplot2)
# Create a ggplot object
plot <- ggplot(df, aes(x, y)) +
geom_point() +  # Add your desired geometry (e.g., points)
# Add the percent symbol to the y-axis tick labels
plot + scale_y_continuous(labels = scales::percent_format(scale = 1))
library(tidyverse)
# Assuming you have a ggplot object named 'plot' and your y-axis values are in percent (e.g., 0.75 for 75%)
# Create a dummy data frame for illustration
df <- data.frame(
x = c(1, 2, 3, 4),
y = c(0.25, 0.5, 0.75, 1)
)
library(ggplot2)
# Create a ggplot object
plot <- ggplot(df, aes(x, y)) +
geom_point() +  # Add your desired geometry (e.g., points)
# Add the percent symbol to the y-axis tick labels
plot + scale_y_continuous(labels = scales::percent_format(scale = 1))
library(tidyverse)
# Assuming you have a ggplot object named 'plot' and your y-axis values are in percent (e.g., 0.75 for 75%)
# Create a dummy data frame for illustration
df <- data.frame(
x = c(1, 2, 3, 4),
y = c(0.25, 0.5, 0.75, 1)
)
library(ggplot2)
# Create a ggplot object
plot <- ggplot(df, aes(x, y)) +
geom_point() +  # Add your desired geometry (e.g., points)
# Add the percent symbol to the y-axis tick labels
scale_y_continuous(labels = scales::percent_format(scale = 1))
plot <- ggplot(df, aes(x, y)) +
geom_point() +  # Add your desired geometry (e.g., points)
# Add the percent symbol to the y-axis tick labels
scale_y_continuous(labels = scales::percent_format(scale = 1))
library(tidyverse)
# Assuming you have a ggplot object named 'plot' and your y-axis values are in percent (e.g., 0.75 for 75%)
# Create a dummy data frame for illustration
df <- data.frame(
x = c(1, 2, 3, 4),
y = c(0.25, 0.5, 0.75, 1)
)
library(ggplot2)
# Create a ggplot object
plot <- ggplot(df, aes(x, y)) +
geom_point()   # Add your desired geometry (e.g., points)
# Add the percent symbol to the y-axis tick labels
plot + scale_y_continuous(labels = scales::percent_format(scale = 1))
power_plots <- list()
for (df_name in names(df_list_hw)) {
power <- ggplot(df_list_hw[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU.Package.Power..W., color = "CPU")) +
geom_line(aes(y = GPU.PPT..W., color = "GPU")) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Power: ", round(mean(df_list_hw[[df_name]]$CPU.Package.Power..W.), 1), " W", "\n",
"Avg GPU Power: ", round(mean(df_list_hw[[df_name]]$GPU.PPT..W.), 1), " W"),
size = 2.5, color = "black", hjust = -0.05, vjust = 1.1) +
labs(
y = "Power Draw (Watts)",
x = "Time - (Minute:Seconds)",
title = paste0("Power Consumption of CPU and GPU Over Time in ", df_name)
) +
scale_y_continuous(labels = scales::percent_format(scale = 1),breaks = seq(0, 300, by = 50),
minor_breaks = seq(0, 300, by = 25),
limits = c(0, 300)) +
scale_x_continuous(
breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%2d:%02d", floor(x/60), x %% 60)
) +
scale_color_manual(name = NULL, values = c("CPU" = "red", "GPU" = "blue")) +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.85, 0.92),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
power_plots[[df_name]] <- power
rm(power)
}
power_plots[[game]]
utilization_plots <- list()
for (df_name in names(dfs_subset)) {
utilization <- ggplot(dfs_subset[[df_name]], aes(seconds)) +
geom_line(aes(y = `CPUUtil(%)`, color = "CPU")) +
geom_line(aes(y = `GPU1Util(%)`, color = "GPU")) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Util: ", round(mean(dfs_subset[[df_name]]$`CPUUtil(%)`), 2), "%", "\n",
"Avg GPU Util: ", round(mean(dfs_subset[[df_name]]$`GPU1Util(%)`), 2), "%"),
size = 2.5, color = "black", hjust = -0.05, vjust = 1.1) +
labs(
y = "Percent Utilized",
x = "Time - (Minute:Seconds)",
title = paste0("Comparing utilization of CPU and GPU Over Time in ", df_name)
) +
scale_y_continuous(labels = scales::percent_format(scale = 1),
breaks = seq(0, 100, by = 20),
limits = c(0, 100)) +
scale_x_continuous(
breaks = seq(0, max(dfs_subset[[df_name]]$seconds), by = 10),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%2d:%02d", floor(x/60), x %% 60)
) +
scale_color_manual(name = "", values = c("CPU" = "red", "GPU" = "blue")) +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.85, 0.90),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
utilization_plots[[df_name]] <- utilization
}
utilization_plots[[game]]
df_list_hw["overwatch"]
df_list_hw["overwatch"]
ggplot(df_list_hw["overwatch"], aes(seconds)) +
geom_line(aes(y = `GPU1Clk(MHz)`), color = "red")
df_list_hw[["overwatch"]]
df_list_hw["overwatch"]
df_list_hw[["overwatch"]]
ggplot(df_list_hw[["overwatch"]], aes(seconds)) +
geom_line(aes(y = `GPU1Clk(MHz)`), color = "red")
df_list_hw["overwatch"]
ggplot(df_list_hw[["overwatch"]], aes(seconds)) +
geom_line(aes(y = `Core.Clocks..avg...MHz.`), color = "red")
df_list_hw["overwatch"]
ggplot(df_list_hw[["overwatch"]], aes(DateTime)) +
geom_line(aes(y = `Core.Clocks..avg...MHz.`), color = "red")
ggplot(df_list_hw[["overwatch"]], aes(seconds(DateTime)) +
geom_line(aes(y = `Core.Clocks..avg...MHz.`), color = "red")
datetime_var <- Sys.time()
datetime_var <- Sys.time()
datetime_var <- Sys.time()
# Extract seconds
seconds <- format(datetime_var, "%S")
# Print the result
print(seconds)
datetime_var <- Sys.time()
# Extract seconds
seconds <- format(datetime_var, "%S")
# Print the result
print(seconds)
datetime_var <- Sys.time()
# Extract seconds
seconds <- format(datetime_var, "%S")
# Print the result
print(seconds)
datetime_var <- Sys.time()
# Extract seconds
seconds <- format(datetime_var, "%S")
# Print the result
print(seconds)
datetime_var <- Sys.time()
# Extract seconds
seconds <- format(datetime_var, "%S")
# Print the result
print(seconds)
datetime_var <- Sys.time()
# Extract seconds
seconds <- format(datetime_var, "%S")
# Print the result
print(seconds)
datetime_var <- Sys.time()
# Extract seconds
seconds <- format(datetime_var, "%S")
# Print the result
print(seconds)
datetime_var <- Sys.time()
# Extract seconds
seconds <- format(datetime_var, "%S")
# Print the result
print(seconds)
seconds <- format(DateTime, "%S")
seconds <- format(df_list_hw["overwatch"]$DateTime, "%S")
# Print the result
print(seconds)
# Assuming you have a ggplot object named 'plot' and your y-axis values are in MHz
# Create a dummy data frame for illustration
df <- data.frame(
x = c(1, 2, 3, 4),
y = c(100, 200, 300, 400)  # Example values in MHz
)
library(ggplot2)
# Create a ggplot object
plot <- ggplot(df, aes(x, y)) +
geom_point() +  # Add your desired geometry (e.g., points)
# Add a label to the y-axis with the unit (MHz)
plot + labs(ylab = "Frequency (MHz)")
# Assuming you have a ggplot object named 'plot' and your y-axis values are in MHz
# Create a dummy data frame for illustration
df <- data.frame(
x = c(1, 2, 3, 4),
y = c(100, 200, 300, 400)  # Example values in MHz
)
library(ggplot2)
# Create a ggplot object
plot <- ggplot(df, aes(x, y)) +
geom_point()   # Add your desired geometry (e.g., points)
# Add a label to the y-axis with the unit (MHz)
plot + labs(ylab = "Frequency (MHz)")
# Assuming you have a ggplot object named 'plot' and your y-axis values are in MHz
# Create a dummy data frame for illustration
df <- data.frame(
x = c(1, 2, 3, 4),
y = c(100, 200, 300, 400)  # Example values in MHz
)
library(ggplot2)
# Create a ggplot object
plot <- ggplot(df, aes(x, y)) +
geom_point()   # Add your desired geometry (e.g., points)
# Add a label to the y-axis with the unit (MHz)
plot + ylab = "Frequency (MHz)")
# Assuming you have a ggplot object named 'plot' and your y-axis values are in MHz
# Create a dummy data frame for illustration
df <- data.frame(
x = c(1, 2, 3, 4),
y = c(100, 200, 300, 400)  # Example values in MHz
)
library(ggplot2)
# Create a ggplot object
plot <- ggplot(df, aes(x, y)) +
geom_point()   # Add your desired geometry (e.g., points)
# Add a label to the y-axis with the unit (MHz)
plot + labs(y = "Frequency (MHz)")
power_plots <- list()
for (df_name in names(df_list_hw)) {
power <- ggplot(df_list_hw[[df_name]], aes(seconds)) +
geom_line(aes(y = CPU.Package.Power..W., color = "CPU")) +
geom_line(aes(y = GPU.PPT..W., color = "GPU")) +
#Adding the average measure into the graph
annotate("text", x = -Inf, y = Inf,
label = paste0("Avg CPU Power: ", round(mean(df_list_hw[[df_name]]$CPU.Package.Power..W.), 1), " W", "\n",
"Avg GPU Power: ", round(mean(df_list_hw[[df_name]]$GPU.PPT..W.), 1), " W"),
size = 2.5, color = "black", hjust = -0.05, vjust = 1.1) +
labs(
y = "Power Draw (Watts)",
x = "Time - (Minute:Seconds)",
title = paste0("Power Consumption of CPU and GPU Over Time in ", df_name)
) +
scale_y_continuous(breaks = seq(0, 300, by = 50),
minor_breaks = seq(0, 300, by = 25),
limits = c(0, 300)) +
scale_x_continuous(
breaks = seq(0, max(df_list_hw[[df_name]]$seconds), by = 20),
#sprintf() is a function in R that allows you to format strings with placeholders for variables. It takes two arguments: the format string and the variables to substitute into the string. The format string is a character string that includes placeholders for the variables.
labels = function(x) sprintf("%2d:%02d", floor(x/60), x %% 60)
) +
scale_color_manual(name = NULL, values = c("CPU" = "red", "GPU" = "blue")) +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(0.85, 0.92),
legend.direction = "horizontal",
legend.text = element_text(size = 6),
legend.background = element_rect(fill = "grey99", color = "black", size = 0.5)) #makes a box around the legend and adds a fill!
power_plots[[df_name]] <- power
rm(power)
}
power_plots[[game]]
#Data Wrangling
summary_fps <- read_excel(excel_file_frameview, sheet = "Summary")
#contains columns I might find important later but don't rn like `Min FPS`, `Max FPS`
summary_fps_o <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`, `Min FPS`, `Max FPS`)
summary_fps <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`)
#code to strip the .exe from the application variable so that it just displays the game name
pattern <- "\\.exe$"
summary_fps$Application <- str_replace(summary_fps$Application, pattern, "")
#Code to calculate averages of "Avg FPS", "1% Low FPS", and "0.1% Low FPS" across game observations (the goal is 3 observations per game then take the averages of that)
summary_fps <- summary_fps %>% group_by(Application) %>%
summarise('AVG FPS' = mean(`Avg FPS`),
'1% Lows' = mean(`1% Low FPS`),
'0.1% Lows' = mean(`0.1% Low FPS`))
#Pivoting the data to a longer format so that each of my FPS measures has their own column
summary_fps_long <- pivot_longer(summary_fps, cols = c("AVG FPS", "1% Lows", "0.1% Lows"), names_to = "fps_type", values_to = "fps")
#Changing the names of the games in the application column to better fit
summary_fps_long <- summary_fps_long %>%
mutate(Application = recode(Application,
"FortniteClient-Win64-Shipping" = "Fortnite",
"starwarsbattlefrontii" = "SW Battlefront II",
"r5apex" = "Apex",
"cod" = "COD: Warzone",
"destiny2" = "Destiny 2"))
#Original
#hehe <- pivot_longer(summary_fps, cols = c("Avg FPS", "1% Low FPS", "0.1% Low FPS"), names_to = "fps_type", values_to = "fps")
#changing the format of the newly created FPS column so that it only displays out to 1 decimal point string to display all numbers
summary_fps_long$fps <- round(summary_fps_long$fps, digits = 1)
############# NOT AS EASY TO REODER A GROUPED BAR CHART AS IT IS A BOXPLOT #############
#Reordering the dataset to display by descending order in the box plot
#group_ordered <- with(summary_fps_long, reorder(fps, desc('AVG FPS'), mean))
#boxplot_circ_day$branch <- factor(boxplot_circ_day$branch, levels = levels(group_ordered))
summary_fps_long <- summary_fps_long %>%
mutate(Application = recode(Application,
"FortniteClient-Win64-Shipping" = "Fortnite",
"starwarsbattlefrontii" = "SW Battlefront II",
"r5apex" = "Apex",
"cod" = "COD: Warzone",
"destiny2" = "Destiny 2"))
